# -*- coding: utf-8 -*-
"""Test Setup of {{{ package.dottedname }}}."""

from plone import api
from plone.browserlayer.utils import registered_layers
from {{{ package.dottedname }}} import config
from {{{ package.dottedname }}} import testing

import unittest


class TestSetup(unittest.TestCase):
    """Validate setup process for {{{ package.dottedname }}}."""

    layer = testing.{{{ package.uppercasename }}}_INTEGRATION_TESTING

    def setUp(self):
        """Additional test setup."""
        self.portal = self.layer['portal']
        self.installer = api.portal.get_tool('portal_quickinstaller')

    def test_product_is_installed(self):
        """Validate that our product is installed."""
        self.assertTrue(
            self.installer.isProductInstalled(config.PROJECT_NAME),
        )

    def test_addon_layer(self):
        """Validate that the browserlayer for our product is installed."""
        layers = [l.getName() for l in registered_layers()]
        self.assertIn('{{{ package.browserlayer }}}', layers)

    def test_plone_app_theming_installed(self):
        """Validate that plone.app.theming is installed."""
        installer = self.installer
        product = 'plone.app.theming'
        if installer.isProductAvailable(product):
            self.assertTrue(installer.isProductInstalled(product))
        else:
            self.assertTrue(product in installer.listInstallableProfiles())

    def test_spirit_plone_theming_installed(self):
        """Validate that spirit.plone.theming is installed."""
        installer = self.installer
        product = 'spirit.plone.theming'
        if installer.isProductAvailable(product):
            self.assertTrue(installer.isProductInstalled(product))
        else:
            self.assertTrue(product in installer.listInstallableProfiles())


class TestUninstall(unittest.TestCase):
    """Validate uninstall process for plonetheme.barcelonetang."""

    layer = testing.{{{ package.uppercasename }}}_INTEGRATION_TESTING

    def setUp(self):
        """Additional test setup."""
        self.portal = self.layer['portal']
        self.installer = api.portal.get_tool('portal_quickinstaller')
        with api.env.adopt_roles(['Manager']):
            self.installer.uninstallProducts(
                products=[config.PROJECT_NAME],
            )

    def test_product_is_uninstalled(self):
        """Validate that our product is uninstalled."""
        self.assertFalse(self.installer.isProductInstalled(
            config.PROJECT_NAME,
        ))

    def test_addon_layer_removed(self):
        """Validate that the browserlayer is removed."""
        layers = [l.getName() for l in registered_layers()]
        self.assertNotIn('{{{ package.browserlayer }}}', layers)
